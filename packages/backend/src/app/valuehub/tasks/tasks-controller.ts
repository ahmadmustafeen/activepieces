/* eslint-disable @typescript-eslint/no-floating-promises */
/* eslint-disable no-console */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/explicit-function-return-type */

import {  taskService } from './task/task-services'



export const taskController = async (app: any) => {

    

    app.get('/', async (req: any, res: any) => {
        const { goalId } = req.query
        const task = await taskService.fetchAllTask(goalId)
        res.status(200).send({ message: 'Fetched tasks successfully', data: task.reverse() })
    })
    app.post('/', async (req: any, res: any) => {
        const task = await taskService.create(req.body)
        res.status(201).send({ message: 'Task is created', data: task })
    })
    app.put('/', (req: any, res: any) => {
        const { id, data } = req.body
        const task = taskService.update(id, data)
        res.status(200).send({ message: 'Task is updated successfully', data: task })
    })

    app.post('/delete', (req: any, res: any) => {
        const { id } = req.body
        const task = taskService.delete(id)
        res.status(200).send({ message: 'Task is deleted successfully', data: task })
    })

    app.post('/ai', async (req: any, res: any)=>{
        const { goalId } = req.body
        const resp = await taskService.autoGeneratedTaskList(goalId)
        if (resp.error) return res.status(501).send(resp.message)

        res.status(201).send(resp.data)
    })

    app.post('/ai/regenerate', async (req: any, res: any)=>{
        const { goalId } = req.body
        const resp = await taskService.autoRegeneratedTaskList(goalId)
        if (resp.error) return res.status(501).send(resp.message)

        res.status(201).send(resp.data)
        
    })

    app.post('/onboarding/ai', async (req: any, res: any)=>{
        const  history  = req.body
        
        const resp = await taskService.onboardingTask(history)
        // if (resp.error) return res.status(501).send(resp)
        res.status(201).send(resp)
        
    })
}
